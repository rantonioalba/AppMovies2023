//
//  HomeViewController.swift
//  AppMovies
//
//  Created Roberto Antonio Alba Hernández on 18/02/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class HomeViewController: UIViewController, HomeViewProtocol {

	var presenter: HomePresenterProtocol?
    var sectionView = SectionView()
    var collectionView : UICollectionView!
    
    var popularShows : ShowsTV?
    var showsTV : [ShowsTV?] = [ShowsTV?]()

	override func viewDidLoad() {
        super.viewDidLoad()
        
        
        
        self.navigationController?.navigationBar.backgroundColor = UIColor(red: 46/255.0, green: 55/255.0, blue: 58/255.0, alpha: 1.0)
        
        
        self.navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.font:UIFont.systemFont(ofSize: 18),NSAttributedString.Key.foregroundColor:UIColor(red: 250/255.0, green: 250/255.0, blue: 250/255.0, alpha: 1.0),NSAttributedString.Key.kern : -0.43]
        
        let window = UIApplication.shared.windows.filter {$0.isKeyWindow}.first
        let statusBar = UIView(frame: window?.windowScene?.statusBarManager?.statusBarFrame ?? CGRect.zero)
        statusBar.backgroundColor = UIColor(red: 46/255.0, green: 55/255.0, blue: 58/255.0, alpha: 1.0)
        window?.addSubview(statusBar)
        
        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(named: "menu")?.withRenderingMode(.alwaysOriginal).withTintColor(UIColor(red: 250/255.0, green: 250/255.0, blue: 250/255.0, alpha: 1.0)), style: UIBarButtonItem.Style.plain, target: self, action: #selector(tapButtonMenu(_:)))
        
        setupView()
        
        presenter?.getShowsTV(completion: { [weak self] (objects:[ShowsTV?]) in
            self?.showsTV = objects
            self?.collectionView.reloadData()
        })
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationItem.title = "TV Shows"
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.navigationItem.title = " "
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    
    func setupView()  {
        self.view.addSubview(sectionView)
        sectionView.viewController = self
        sectionView.layer.cornerRadius = 5.0
        sectionView.layer.masksToBounds = true
        sectionView.translatesAutoresizingMaskIntoConstraints = false
        sectionView.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor, constant: 10).isActive = true
        sectionView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor, constant: 25).isActive = true
        sectionView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor, constant: -25).isActive = true
        sectionView.heightAnchor.constraint(equalToConstant: 40.0).isActive = true
        
                
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        layout.minimumLineSpacing = 0
        layout.minimumInteritemSpacing = 0
        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = .clear
        collectionView.isPagingEnabled = true
        collectionView.contentInset = UIEdgeInsets(top: 0.0, left: 0.0, bottom: 0.0, right: 0.0)
        collectionView.scrollIndicatorInsets = UIEdgeInsets(top: 0.0, left: 0.0, bottom: 0.0, right: 0.0)
        
        collectionView.register(HomeViewCell.self, forCellWithReuseIdentifier: "\(HomeViewCell.self)")

        collectionView.dataSource = self
        collectionView.delegate = self
        
        self.view.addSubview(collectionView)
        
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.topAnchor.constraint(equalTo: sectionView.bottomAnchor, constant: 5.0).isActive = true
        collectionView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor, constant: 15.0).isActive = true
        collectionView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor, constant: -15.0).isActive = true
        collectionView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor, constant: 0.0).isActive = true
        
    }
    
    @objc func tapButtonMenu(_ sender:UIBarButtonItem)  {
        showAlert()
    }
    
    func showAlert() {
        let alert  = UIAlertController()

        alert.title = "What do you want to do"
        alert.view.isOpaque = true

        let viewProfileAction = UIAlertAction(title: "View Profile", style: .default) { [weak self] (Action) in
           
            self?.presenter?.showProfile()
        }

       
        alert.addAction(viewProfileAction)

        let logOutAction = UIAlertAction(title:"Log out", style: UIAlertAction.Style.default, handler: { [weak self] (action) in
            
            self?.presenter?.logOut(completion: { [weak self] response in
                if response {
                    self?.presenter?.closeSession()
                }
            })
        })
        
       

        alert.addAction(logOutAction)
        
        logOutAction.setValue(UIColor(red: 252/255, green: 55/255, blue: 55/255, alpha: 1), forKey: "titleTextColor")
        
        let cancelAction = UIAlertAction(title: "Cancelar", style: .cancel)
        alert.addAction(cancelAction)
        
        self.present(alert, animated: true, completion: nil)
    }
    
    func scrollTo(indexPath:IndexPath)  {
        let newIndexPath = IndexPath(item: 0, section: indexPath.item)
                
        self.collectionView.reloadData()
        
        if !__CGSizeEqualToSize(collectionView.frame.size, CGSize.zero) {
            collectionView.scrollToItem(at: newIndexPath, at: UICollectionView.ScrollPosition.top, animated: true)
        }
    }
}


extension HomeViewController : UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return showsTV.count
    }
    
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "\(HomeViewCell.self)", for: indexPath) as? HomeViewCell else {
            return UICollectionViewCell()
        }
        
        cell.configureCell(showsTV: showsTV[indexPath.section])
        cell.delegate = self
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.frame.width, height: collectionView.frame.height)
    }
    
    func scrollViewWillEndDragging(_ scrollView: UIScrollView, withVelocity velocity: CGPoint, targetContentOffset: UnsafeMutablePointer<CGPoint>) {
        
        print(targetContentOffset.pointee.x / (self.view.frame.width - 30))
        
        let indexPath = IndexPath(item: Int(targetContentOffset.pointee.x / (self.view.frame.width - 30)), section: 0)
        
        sectionView.collectionView.selectItem(at: indexPath, animated: true, scrollPosition: [])
        
    }
}

extension HomeViewController : ShowTVProtocol {
    func showSelected(_ showTV: Result) {
        presenter?.goToShowTV(showTV: showTV)
    }
}
