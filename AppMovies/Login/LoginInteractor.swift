//
//  LoginInteractor.swift
//  AppMovies
//
//  Created Roberto Antonio Alba Hernández on 17/02/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class LoginInteractor: LoginInteractorProtocol {
    
    weak var presenter: LoginPresenterProtocol?
    
    func getRequestToken(completion: @escaping ((Bool, String) -> ())) {
        APIManager.getRequestToken { requestToken, errorApi in
            if let requestToken = requestToken {
                completion(true, "")
            } else {
                if let errorApi = errorApi {
                    completion(false, errorApi.status_message ?? "")
                }
            }
        }
    }
    
    func validateLogin(withUserName userName: String, andPassword password: String, completion: @escaping ((Bool, String) -> ())) {
        
        APIManager.getRequestToken { requestToken, errorApi in
            if let requestToken = requestToken {
                
                let login = Login(username: userName, password: password, request_token: requestToken.request_token ?? "")
                
                APIManager.validateToken(withLogin: login) { requestToken, errorApi in
                    if let requestToken = requestToken {
                        
                        APIManager.createSession(withRequestToken: requestToken.request_token ?? "") { session, errorApi in
                            if let session = session {
                                self.presenter?.setRequestToken(requestToken: requestToken, andSession: session)
                                completion(true, "")
                                
                            } else {
                                if let errorApi = errorApi {
                                    completion(false, errorApi.status_message ?? "")
                                }
                            }
                        }
                    } else {
                        if let errorApi = errorApi {
                            completion(false, errorApi.status_message ?? "")
                        }
                    }
                }
            } else {
                if let errorApi = errorApi {
                    completion(false, errorApi.status_message ?? "")
                }
            }
        }
    }
}
