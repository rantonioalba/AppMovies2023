//
//  DetailsShowTVViewController.swift
//  AppMovies
//
//  Created Roberto Antonio Alba Hernández on 19/02/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class DetailsShowTVViewController: UIViewController, DetailsShowTVViewProtocol {

	var presenter: DetailsShowTVPresenterProtocol?
    var scrollView:UIScrollView!
    var collectionView : UICollectionView!
    var showTV: Result!
    var watchTVProviders : [String : AnyObject] = [String : AnyObject]()
    
    
    let imageView: CustomImageView = {
        let view = CustomImageView()
        view.image = UIImage(named: "logo")
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    let labelTitle: UILabel = {
        let view = UILabel()
        view.font = UIFont.systemFont(ofSize: 20)
        view.textColor = UIColor.lightGray
        view.textAlignment = .center
//        [NSAttributedString.Key.font:UIFont.systemFont(ofSize: 18),NSAttributedString.Key.foregroundColor:UIColor(red: 250/255.0, green: 250/255.0, blue: 250/255.0, alpha: 1.0),NSAttributedString.Key.kern : -0.43]
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    let labelCountry: UILabel = {
        let view = UILabel()
        view.font = UIFont.systemFont(ofSize: 15)
        view.textColor = UIColor.lightGray
        view.textAlignment = .center
//        [NSAttributedString.Key.font:UIFont.systemFont(ofSize: 18),NSAttributedString.Key.foregroundColor:UIColor(red: 250/255.0, green: 250/255.0, blue: 250/255.0, alpha: 1.0),NSAttributedString.Key.kern : -0.43]
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    let labelGenre: UILabel = {
        let view = UILabel()
        view.font = UIFont.systemFont(ofSize: 15)
        view.textColor = UIColor.lightGray
        view.textAlignment = .center
//        [NSAttributedString.Key.font:UIFont.systemFont(ofSize: 18),NSAttributedString.Key.foregroundColor:UIColor(red: 250/255.0, green: 250/255.0, blue: 250/255.0, alpha: 1.0),NSAttributedString.Key.kern : -0.43]
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    let labelDate: UILabel = {
        let view = UILabel()
        view.font = UIFont.systemFont(ofSize: 13)
        view.textColor = UIColor(red: 29/255.0, green: 180/255.0, blue: 93/255.0, alpha: 1.0)
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()

    let labelRating: UILabel = {
        let view = UILabel()
        view.font = UIFont.systemFont(ofSize: 13)
        view.textColor = UIColor(red: 29/255.0, green: 180/255.0, blue: 93/255.0, alpha: 1.0)
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    let imageViewRating: CustomImageView = {
        let view = CustomImageView()
        view.image = UIImage(named: "ic_star")?.withRenderingMode(UIImage.RenderingMode.alwaysOriginal).withTintColor(UIColor(red: 29/255.0, green: 180/255.0, blue: 93/255.0, alpha: 1.0))
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    let stackView: UIStackView = {
        let view = UIStackView()
        view.axis = .vertical
        view.spacing = 25
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    let labelSummary: UILabel = {
        let view = UILabel()
        view.font = UIFont.systemFont(ofSize: 13)
        view.textColor = UIColor(red: 219/255.0, green: 221/255.0, blue: 253/255.0, alpha: 1.0)
        view.numberOfLines = 0
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()

	override func viewDidLoad() {
        super.viewDidLoad()
        
        self.navigationItem.title = "Description of Show"
        self.navigationController?.navigationBar.tintColor = UIColor(red: 250/255.0, green: 250/255.0, blue: 250/255.0, alpha: 1.0)
        
        self.view.backgroundColor = UIColor(red: 21/255.0, green: 39/255.0, blue: 46/255.0, alpha: 1.0)
        
        self.navigationController?.navigationBar.backgroundColor = UIColor(red: 46/255.0, green: 55/255.0, blue: 58/255.0, alpha: 1.0)
                
        self.navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.font:UIFont.systemFont(ofSize: 18),NSAttributedString.Key.foregroundColor:UIColor(red: 250/255.0, green: 250/255.0, blue: 250/255.0, alpha: 1.0),NSAttributedString.Key.kern : -0.43]
        
        let window = UIApplication.shared.windows.filter {$0.isKeyWindow}.first
        let statusBar = UIView(frame: window?.windowScene?.statusBarManager?.statusBarFrame ?? CGRect.zero)
        statusBar.backgroundColor = UIColor(red: 46/255.0, green: 55/255.0, blue: 58/255.0, alpha: 1.0)
        window?.addSubview(statusBar)
                
        setupView()
        
//        presenter?.getProviders(idShowTV: showTV.id, completion: { (object :WatchTVProviders?) in
//            if let object = object {
//                self.watchTVProviders = object
////                self.collectionView.reloadData()
//            }
//        })
        
        presenter?.getProviders(idShowTV: showTV.id, completionHandler: { objects, error in
            
            if let objects = objects {
                self.watchTVProviders = objects
                
                let arrayKeys = Array(self.watchTVProviders)
                
                
                let array = arrayKeys.first(where: {$0.key == "results"})?.value as? [String:AnyObject]
                
                if let array = array {
                    
                    let array2 = array.values
//                        let array3 = Array(array2.values)
                        
                        array2.map { value in
                        print(value)
                            
                            let v1 = value as? [String:AnyObject]
                            
                            v1.map { elemnt in
                                print(elemnt)
                                let v2 = elemnt as? [String: AnyObject]
                                
                                v2?.values.map { element in
                                    print(element)
                                    
                                    let v3 = elemnt as? [String:AnyObject]
                                    
                                    
                                    
                                    v3?.values.map { e in
                                        print(e)
                                        let v4 = e as? [String:AnyObject]
                                        
                                        v4?.first { elem in
                                            print(elem)
                                            return true
                                        }
                                    }
                                }
                            }
                            
                    
                }
            }
                
                
                
                
                
                
                
                
                
                array.map { value in
                    print(value.values)
                }
                
                
                
                var d1:AnyObject!
                
                for (key, values) in objects {
                    print("kind: \(key)")
                    if key == "results" {
                        print(values)
                        d1 = values
//                        let v = values as? [String:AnyObject]
//
//                        for(key2, values2) in v  {
//                            print(key2)
////                            for(key3, values3) in values2  as? [String:AnyObject] {
////                                print(key3)
////                            }
//                        }
                    }
                }
                
                
                print(d1)
                
                
                
                
                let paths = objects.map { value in
                    print(value)
                    
                }
            
                print(paths)
                print(paths)
            }
        })
        
    }
    
    func setupView() {
        scrollView = UIScrollView()
        scrollView.showsVerticalScrollIndicator = true
        
        scrollView.addSubview(imageView)
        imageView.topAnchor.constraint(equalTo: scrollView.topAnchor).isActive = true
        imageView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: 0).isActive = true
        imageView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor, constant: 0).isActive = true
        imageView.widthAnchor.constraint(equalTo: scrollView.widthAnchor, multiplier: 1.0).isActive = true
        imageView.heightAnchor.constraint(equalToConstant: 300).isActive = true
        imageView.loadImageUsingUrlString(urlString: showTV.backdropPath ?? "")
        
        scrollView.addSubview(labelTitle)
        labelTitle.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 10).isActive = true
        labelTitle.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: 5).isActive = true
        labelTitle.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor, constant: -5).isActive = true
        labelTitle.heightAnchor.constraint(equalToConstant: 20).isActive = true
        labelTitle.text = showTV.name ?? ""

        scrollView.addSubview(labelCountry)
        labelCountry.topAnchor.constraint(equalTo: labelTitle.bottomAnchor, constant: 0).isActive = true
        labelCountry.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: 5).isActive = true
        labelCountry.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor, constant: -5).isActive = true
        labelCountry.text = presenter?.getCountries(originCountry: showTV.originCountry ?? [] )

        scrollView.addSubview(labelGenre)
        labelGenre.topAnchor.constraint(equalTo: labelCountry.bottomAnchor, constant: 7).isActive = true
        labelGenre.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: 5).isActive = true
        labelGenre.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor, constant: -5).isActive = true
        labelGenre.text = presenter?.getGenres(genresIds: showTV.genreIDS ?? [])

        scrollView.addSubview(labelDate)
        labelDate.topAnchor.constraint(equalTo: labelGenre.bottomAnchor, constant: 10).isActive = true
        labelDate.leadingAnchor.constraint(equalTo: self.scrollView.leadingAnchor, constant: 20).isActive = true
        labelDate.heightAnchor.constraint(equalToConstant: 12).isActive = true

        scrollView.addSubview(labelRating)
        labelRating.topAnchor.constraint(equalTo: labelGenre.bottomAnchor, constant: 10).isActive = true
        labelRating.trailingAnchor.constraint(equalTo: self.scrollView.trailingAnchor, constant: -20).isActive = true
        labelRating.widthAnchor.constraint(equalToConstant: 20).isActive = true
        labelRating.heightAnchor.constraint(equalToConstant: 12).isActive = true

        scrollView.addSubview(imageViewRating)
        imageViewRating.topAnchor.constraint(equalTo: labelGenre.bottomAnchor, constant: 10).isActive = true
        imageViewRating.trailingAnchor.constraint(equalTo: labelRating.leadingAnchor, constant: -7).isActive = true
        imageViewRating.widthAnchor.constraint(equalToConstant: 10).isActive = true
        imageViewRating.heightAnchor.constraint(equalToConstant: 10).isActive = true


        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        let date = dateFormatter.date(from: showTV.firstAirDate ?? "")

        dateFormatter.dateFormat = "MMM dd, yyyy"
        labelDate.text = dateFormatter.string(from: date ?? Date())
        labelRating.text = "\(showTV.voteAverage ?? 0)"
        
        
        let viewLabelSummary = UIView()
        viewLabelSummary.addSubview(labelSummary)
        labelSummary.topAnchor.constraint(equalTo: viewLabelSummary.topAnchor, constant: 0).isActive = true
        labelSummary.leadingAnchor.constraint(equalTo: viewLabelSummary.leadingAnchor, constant: 15).isActive = true
        labelSummary.trailingAnchor.constraint(equalTo: viewLabelSummary.trailingAnchor, constant: -15).isActive = true
        labelSummary.bottomAnchor.constraint(equalTo: viewLabelSummary.bottomAnchor, constant: 0).isActive = true
        
        stackView.addArrangedSubview(viewLabelSummary)
        
        labelSummary.text = showTV.overview
        
        
        scrollView.addSubview(stackView)
        stackView.topAnchor.constraint(equalTo: labelRating.bottomAnchor,constant: 10).isActive = true
        stackView.centerXAnchor.constraint(equalTo: scrollView.centerXAnchor).isActive = true
        stackView.widthAnchor.constraint(equalTo: scrollView.widthAnchor, multiplier: 1.0, constant: 0).isActive = true
//        stackView.heightAnchor.constraint(equalToConstant: 450).isActive = true
        stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor, constant: 0).isActive = true
        
        self.view.addSubview(scrollView)
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        
        
        
        
        scrollView.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor).isActive = true
        scrollView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor).isActive = true
        scrollView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor).isActive = true
        scrollView.widthAnchor.constraint(equalTo: self.view.widthAnchor).isActive = true
        scrollView.centerXAnchor.constraint(equalTo: self.view.centerXAnchor).isActive = true
        scrollView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor).isActive = true
        
        
    }
}

//extension DetailsShowTVViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
//    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
//        return 0
//    }
//
//    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
//        <#code#>
//    }
//
//
//}
